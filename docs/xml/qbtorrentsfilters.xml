<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lazqBitTorrentWebUI">
    <!--
         ====================================================================
         qBTorrentsFilters
         ====================================================================
    -->
    <module name="qBTorrentsFilters">
      <short>Unit containing a container for filters.</short>
      <descr>
        <p>This unit contains a specialized wrapper to deal with filters.</p>
      </descr>
      <!-- object Visibility: default -->
      <element name="TqBTorrentsFilter">
        <short>An object to manage filters for the function   <link id="#lazqBitTorrentWebUI.qBitTorrentWebUI.TqBitTorrentWebUI.GetTorrentsFiltered">GetTorrentsFiltered</link>.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lazqBitTorrentWebUI.qBitTorrentWebUI.TqBitTorrentWebUI.GetTorrentsFiltered">GetTorrentsFiltered</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TqBTorrentsFilter.Filters">
        <short>A <var>String</var> with the filters already delimited by '&amp;'.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TqBTorrentsFilter.Count">
        <short>The amount of filters contained in the object.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TqBTorrentsFilter.Count">
        <short>The amount of filters contained in the object.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.Clear">
        <short>Clears the filters.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.Clear.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withFilter">
        <short>Adds the filter named 'filter'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withFilter.aFilter">
        <short>The value for the filter named 'filter'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withFilter.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutFilter">
        <short>Removes the filter named 'filter'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutFilter.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withCategory">
        <short>Adds the filter named 'category'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withCategory.aCategory">
        <short>The value for the filter named 'category'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withCategory.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutCategory">
        <short>Removes the filter named 'category'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutCategory.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withSort">
        <short>Adds the filter named 'sort'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withSort.aSort">
        <short>The value for the filter named 'sort'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withSort.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutSort">
        <short>Removes the filter named 'sort'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutSort.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withReverse">
        <short>Adds the filter named 'reverse'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withReverse.aReverse">
        <short>The value for the filter named 'reverse'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withReverse.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutReverse">
        <short>Removes the filter named 'reverse'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutReverse.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withLimit">
        <short>Adds the filter named 'limit'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withLimit.aLimit">
        <short>The value for the filter named 'limit'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withLimit.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutLimit">
        <short>Removes the filter named 'limit'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutLimit.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOffset">
        <short>Adds the filter named 'offset'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TqBTorrentsFilter.withOffset.aOffset">
        <short>The value for the filter named 'offset'.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOffset.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TqBTorrentsFilter.withOutOffset">
        <short>Removes the filter named 'offset'.</short>
        <descr/>
        <errors/>
        <example/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TqBTorrentsFilter.withOutOffset.Result">
        <short>Returns <var>Self</var> so the filters can be chained.</short>
      </element>
    </module> <!-- qBTorrentsFilters -->
  </package>
</fpdoc-descriptions>
